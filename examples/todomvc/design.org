* Some design thoughts:
** Design aims:

quite similar to Petrol, really:
- we declare a set of 'behaviours' for the app, which define how the
  state changes based on events (but know nothing of rendering)
- we declare a tree of 'views' for the app, which define what the app
  looks like based on a given state, and generate events (but knows
  nothing of behaviour)
- we define a pattern for parent/child components which doesn't
  involve each controller/view becoming a whole MVC function
- we can snapshot the whole state of an application, alter it
  (e.g. from the REPL), and reinstate previous states
- we can re-use components in a different context, without any change
  to the component (and preferably with the component knowing
  ​_nothing_​ of its context - this is particularly for the 'data-table'
  example - the data-table should know nothing of the data within it)
- persists state over a figwheel reload

but:
- we avoid top-level side effects (i.e. ~extend-protocol~)
- we try to avoid boilerplate where possible
- we try to avoid leaving component-local state in the global app map
  where possible (in order to avoid stale state/memory leaks)

** Design un-aims
- replaying old events with new behaviour? I wasn't sure about this -
  mostly because chances are the events need to change format, too, or
  have extra data added
